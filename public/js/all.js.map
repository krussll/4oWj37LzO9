{"version":3,"sources":["config.js","layoutController.js","homeController.js","loginController.js","searchController.js","registerController.js","userShowController.js","dashboardController.js","settingsController.js","hashtagShowController.js","leagueShowController.js","buyController.js","sideNavController.js","leaguesController.js","leagueCreateController.js","hashtagListController.js","betaWaitController.js","contactController.js","autocompleteDirective.js","cdnImage.js","cdnBuyButton.js","cdnSellButton.js","priceGraph.js","paging.js","titlecaseFilter.js","currencyFilter.js","percentageDifferenceFilter.js","notifyService.js","validationService.js","buyTagService.js","portfoliosService.js","selectedPortfolioService.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxhtfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var app = angular.module('appMain', ['ngCookies', \"bw.paging\"]);\r\n","\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('layoutController', function($scope, $http) {\r\n    $scope.layout =\r\n    {\r\n      control: {\r\n        isLoading: false\r\n      },\r\n        logout: function() {\r\n\r\n            var login = this;\r\n            $http.post('/api/login/destroy')\r\n            .success(function(data)\r\n                {\r\n                    window.location = '/';\r\n                });\r\n        },\r\n        consts:\r\n        {\r\n            siteName: 'tagdaq'\r\n        }\r\n\t}\r\n});\r\n\r\n})();\r\n","\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('homeController', function($scope, $http, $location) {\r\n    $scope.home = \r\n    {\r\n    \tcontrol: {\r\n    \t\tisLoading: false\r\n    \t},\r\n        search: {\r\n            location: ''\r\n        },\r\n    \tprofiles: null,\r\n    \tinit: function ()\r\n    \t{\r\n    \t\tvar home = this;\r\n    \t},\r\n        geoId: null,\r\n    \tsubmit: function () {\r\n            var home = this;\r\n            window.location = \"s/\" + home.search.location;\r\n        },\r\n        geoid: null,\r\n\t}\r\n});\r\n\r\n})();","\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('loginController', function($scope, $http, validationService) {\r\n    $scope.login =\r\n    {\r\n        inputs: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n    \tcontrol: {\r\n    \t\tisLoading: false\r\n    \t},\r\n        validation: {\r\n            email: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            password: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            overview: {\r\n                isValid: true,\r\n                message: ''\r\n            }\r\n        },\r\n        submit: function() {\r\n\r\n            var login = this;\r\n            \r\n            if(login.isValid())\r\n            {\r\n              $http.post('/api/login/auth', login.inputs)\r\n                .success(function(data)\r\n                {\r\n                    if (data.success === true)\r\n                    {\r\n                        window.location = 'dashboard' ;\r\n                    }else\r\n                    {\r\n                        login.validation.email.isValid = false;\r\n                        login.validation.email.message = 'Incorrect email/password';\r\n\r\n                        login.validation.password.isValid = false;\r\n                        login.validation.password.message = 'Incorrect email/password';\r\n                    }\r\n                });\r\n            }\r\n\r\n        },\r\n        isValid: function()\r\n        {\r\n            var login = this;\r\n            var isValid = true;\r\n           \r\n            login.validation.email = validationService.email(login.inputs.email);\r\n            login.validation.password = validationService.password(login.inputs.password);\r\n            \r\n            angular.forEach(login.validation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n            \r\n            return isValid;\r\n        }\r\n\r\n\t}\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('searchController', function($scope, $http) {\r\n    $scope.search = \r\n    {\r\n    \tcontrol: {\r\n            isLoading: true\r\n        },\r\n        inputs: {\r\n            hashtag: ''\r\n        },\r\n        hashtags:[],\r\n        init: function (hashtag)\r\n        {\r\n            var search = this;\r\n            search.inputs.hashtag = hashtag;\r\n            search.control.isLoading = true;\r\n\r\n            search.searchHashtags();\r\n        },\r\n        searchHashtags: function()\r\n        {\r\n            var search = this;\r\n            search.control.isLoading = true;\r\n\r\n            $http.get('/api/hashtags/byname?tag=' + search.inputs.hashtag)\r\n                .success(function(data){\r\n                    search.hashtags = data;\r\n                    search.control.isLoading = false;\r\n                });\r\n        }        \r\n\t}\r\n});\r\n\r\n})();","\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('registerController', function($scope, $http, validationService) {\r\n    $scope.register = \r\n    {\r\n        inputs: {\r\n            firstname: '',\r\n            surname: '',\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validation: {\r\n            firstname: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            surname: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            email: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            password: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n        },\r\n    \tcontrol: {\r\n    \t\tisLoading: false\r\n    \t},\r\n        submit: function () {\r\n            var register = this;\r\n            if (register.isValid())\r\n            {\r\n               $http.post('/api/users/create', register.inputs)\r\n                .success(function(data) \r\n                {\r\n                    if (data.success === true)\r\n                    {\r\n                        window.location = '/dashboard?r=true';\r\n                    }else\r\n                    {\r\n                        console.log('error');\r\n                    }\r\n                }); \r\n            }\r\n            \r\n        },\r\n        isValid: function() {\r\n            var register = this;\r\n            var isValid = true;\r\n            \r\n            register.validation.firstname = validationService.shortDescription(register.inputs.firstname);\r\n            register.validation.surname = validationService.shortDescription(register.inputs.surname);\r\n            register.validation.email = validationService.email(register.inputs.email);\r\n            register.validation.password = validationService.password(register.inputs.password);\r\n            \r\n\r\n            angular.forEach(register.validation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n            return isValid;\r\n        }\r\n    \t\r\n\t}\r\n});\r\n\r\n})();","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('userShowController', function($scope, $http) {\r\n    $scope.userShow = \r\n    {\r\n    \tcontrol: {\r\n            isLoading: true\r\n        },\r\n        id: '',\r\n        geocode: null,\r\n        user: null,\r\n        \r\n        init: function (id)\r\n        {\r\n            var userShow = this;\r\n            userShow.id = id;\r\n            userShow.control.isLoading = true;\r\n\r\n            $http.get('/api/users/id?id=' + userShow.id)\r\n                .success(function(data){\r\n                    userShow.user = data;\r\n                    userShow.control.isLoading = false;\r\n                });\r\n            \r\n        }      \r\n\t}\r\n});\r\n\r\n})();","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('dashboardController', function($scope, $http, selectedPortfolioService) {\r\n    $scope.dashboard = \r\n    {\r\n    \tcontrol: {\r\n            isLoading: true,\r\n            hashtagsLoading: true,\r\n        },\r\n        activeTrades: [],\r\n        popularHashtags: [],\r\n        globalLeagues: [],\r\n        privateLeagues: [],\r\n        popularHashtag: null,\r\n        searchTerm: '',\r\n        invalidSearch: false,\r\n        init: function ()\r\n        {\r\n            var dashboard = this;\r\n            dashboard.control.isLoading = true;\r\n            dashboard.control.hashtagsLoading = true;\r\n\r\n\r\n            $http.get('/api/hashtags/popular')\r\n                .success(function(data){\r\n                    dashboard.popularHashtags = data;\r\n                    if (data.length > 0)\r\n                    {\r\n                        dashboard.popularHashtag = data[0];\r\n                    }\r\n                    dashboard.control.hashtagsLoading = false;\r\n                });\r\n\r\n            $http.get('/api/leagues/user/positions')\r\n                .success(function(data){\r\n                    dashboard.globalLeagues = data.global;\r\n                    dashboard.privateLeagues = data.private;\r\n                    \r\n                    dashboard.control.hashtagsLoading = false;\r\n                });\r\n            \r\n        },\r\n        searchHashtags: function() {\r\n            var dashboard = this;\r\n                dashboard.invalidSearch = false;\r\n\r\n            if (dashboard.searchTerm != '')\r\n            {\r\n                window.location = 'hashtag/search/' + dashboard.searchTerm;\r\n            }else {\r\n                dashboard.invalidSearch = true;\r\n            }\r\n            \r\n        },\r\n        updateTrades: function()\r\n        {\r\n            var dashboard = this;\r\n            var id = selectedPortfolioService.getPortfolioId();\r\n            $http.get('/api/trades/active?portfolio_id=' + id)\r\n                .success(function(data){\r\n                    dashboard.activeTrades = data.trades;\r\n                    dashboard.control.isLoading = false;\r\n                });\r\n        } \r\n\t};\r\n\r\n    $scope.$watch(function () {\r\n           return selectedPortfolioService.portfolioId;\r\n         },                       \r\n          function(newVal, oldVal) {\r\n            if(newVal > 0)\r\n            {\r\n               $scope.dashboard.updateTrades(); \r\n            }\r\n            \r\n        }, true);\r\n});\r\n\r\n})();","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('settingsController', function($scope, $http, pnotifyService, validationService) {\r\n    $scope.settings = \r\n    {\r\n    \tcontrol: {\r\n            isLoading: true\r\n        },\r\n        nameInputs: {\r\n            firstname: '',\r\n            surname: ''\r\n        },\r\n        passwordInputs: {\r\n            currentPassword: '',\r\n            newPassword: '',\r\n            confirmPassword: ''\r\n        },\r\n        nameValidation: {\r\n            firstname: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            surname: {\r\n                isValid: true,\r\n                message: ''\r\n            }\r\n        },\r\n        passwordValidation:\r\n        {\r\n            currentPassword: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            newPassword: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            confirmPassword: {\r\n                isValid: true,\r\n                message: ''\r\n            }\r\n        },\r\n        init: function ()\r\n        {\r\n            var settings = this;\r\n            settings.control.isLoading = true;\r\n\r\n            $http.get('/api/users/details')\r\n                .success(function(data){\r\n                    settings.nameInputs.firstname = data.firstname;\r\n                    settings.nameInputs.surname = data.surname;\r\n                });\r\n        },\r\n        changePassword: function()\r\n        {\r\n            var settings = this;\r\n            \r\n            if(settings.changePasswordIsValid())\r\n            {\r\n                $http.post('api/users/password/change', settings.passwordInputs)\r\n                .success( function(data)\r\n                        {\r\n                            console.log(data);\r\n                            if (data.success == true)\r\n                            {\r\n                                pnotifyService.success('Update Complete', 'Your details have been updated');\r\n                                settings.passwordInputs.currentPassword = '';\r\n                                settings.passwordInputs.newPassword = '';\r\n                                settings.passwordInputs.confirmPassword = '';\r\n                            }else\r\n                            {\r\n                                pnotifyService.error('Update Complete', data.message);\r\n                            }\r\n                        }\r\n                    );\r\n            }\r\n            \r\n        },\r\n        changeName: function()\r\n        {\r\n            var settings = this;\r\n\r\n            if (settings.changeNameIsValid())\r\n            {\r\n                var postVals = {\r\n                    firstname: settings.nameInputs.firstname,\r\n                    surname: settings.nameInputs.surname\r\n                };\r\n                $http.post('api/users/details/change', postVals)\r\n                    .success( function(data)\r\n                        {\r\n                            if (data.success == true)\r\n                            {\r\n                                pnotifyService.success('Update Complete', 'Your details have been updated');\r\n                            }\r\n                        }\r\n                    );  \r\n            }\r\n        },\r\n        changeNameIsValid: function()\r\n        {\r\n            var settings = this;\r\n            var isValid = true;\r\n            \r\n            settings.nameValidation.firstname = validationService.shortDescription(settings.nameInputs.firstname);\r\n            settings.nameValidation.surname = validationService.shortDescription(settings.nameInputs.surname);\r\n\r\n            angular.forEach(settings.nameValidation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n\r\n            return isValid;\r\n        },\r\n        changePasswordIsValid: function()\r\n        {\r\n            var settings = this;\r\n            var isValid = true;\r\n            \r\n            settings.passwordValidation.currentPassword = validationService.password(settings.passwordInputs.currentPassword);\r\n            settings.passwordValidation.newPassword = validationService.password(settings.passwordInputs.newPassword);\r\n\r\n\r\n            if (settings.passwordInputs.newPassword !== settings.passwordInputs.confirmPassword)\r\n            {\r\n                isValid = false;\r\n                settings.passwordValidation.confirmPassword.isValid = false;\r\n                settings.passwordValidation.confirmPassword.message = 'Passwords don\\'t match';\r\n            }else\r\n            {\r\n                settings.passwordValidation.confirmPassword.isValid = true;\r\n                settings.passwordValidation.confirmPassword.message = '';\r\n            }\r\n\r\n            angular.forEach(settings.passwordValidation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n\r\n            return isValid;\r\n        }        \r\n\t}\r\n});\r\n\r\n})();","\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('hashtagShowController', function($scope, $http) {\r\n    $scope.hashtagShow = \r\n    {\r\n    \tcontrol: {\r\n    \t\tisLoading: false\r\n    \t},\r\n        id: null,\r\n        hashtag: null,\r\n        prices: [],\r\n    \tprofiles: null,\r\n    \tinit: function (id)\r\n    \t{\r\n    \t\tvar hashtagShow = this;\r\n            hashtagShow.control.isLoading = true;\r\n\r\n            hashtagShow.id = id;\r\n            $http.get('/api/hashtags/id?id=' + hashtagShow.id)\r\n                .success(function(data){\r\n                    hashtagShow.hashtag = data;\r\n                    hashtagShow.control.isLoading = false;\r\n                });\r\n\r\n            \r\n            \r\n    \t},\r\n\t}\r\n});\r\n\r\n})();","\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('leagueShowController', function($scope, $http) {\r\n    $scope.leagueShow = \r\n    {\r\n    \tcontrol: {\r\n    \t\tisLoading: false,\r\n            isOwner: false\r\n    \t},\r\n        inputs: {\r\n            name: ''\r\n        },\r\n        id: null,\r\n        type: null,\r\n        name: null,\r\n        league: null,\r\n        positions: [],\r\n    \tinit: function (id)\r\n    \t{\r\n    \t\tvar leagueShow = this;\r\n            leagueShow.control.isLoading = true;\r\n            leagueShow.id = id;\r\n            leagueShow.type = '';\r\n\r\n            $http.get('/api/leagues/' + leagueShow.id)\r\n                .success(function(data){\r\n                    leagueShow.league = data.league;\r\n                    leagueShow.control.isOwner = data.is_owner;\r\n\r\n                    leagueShow.inputs.name = leagueShow.league.name;\r\n                });\r\n\r\n            $http.get('/api/leagues/' + leagueShow.id + '/positions')\r\n                .success(function(data){\r\n                    leagueShow.positions = data.positions;\r\n                    leagueShow.name = data.name;\r\n                    leagueShow.control.isLoading = false;\r\n                }); \r\n    \t},\r\n        submit: function()\r\n        {\r\n\r\n        },\r\n\t}\r\n});\r\n\r\n})();","\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('buyController', function($scope, $http, buyTagService, validationService, pnotifyService, portfoliosService, selectedPortfolioService) {\r\n    $scope.buy =\r\n    {\r\n    \tcontrol: {\r\n            isLoading: false,\r\n            isSubmitted: false\r\n        },\r\n        userPortfolios: null,\r\n        hashtag: {\r\n            portfolio: null,\r\n            hastag_id: 0,\r\n            shares_taken: 0,\r\n            price: 0,\r\n            tag: ''\r\n        },\r\n        validation: {\r\n            portfolio: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n            shares_taken: {\r\n                isValid: true,\r\n                message: ''\r\n            }\r\n        },\r\n        total:0,\r\n        init: function()\r\n        {\r\n            var buy = this;\r\n            buy.userPortfolios = []; \r\n        },\r\n        buy: function()\r\n        {\r\n            var buy = this;\r\n            buy.control.isLoading = true;\r\n\r\n            if(buy.isValid())\r\n            {\r\n                var postData = {\r\n                    'hashtag_id': buy.hashtag.hashtag_id,\r\n                    'shares_taken': buy.hashtag.shares_taken,\r\n                    'portfolio_id': buy.hashtag.portfolio\r\n                };\r\n\r\n                $http.post('/api/trades/create', postData)\r\n                    .success(function(data){\r\n                        console.log(data);\r\n                        if (data.success == true)\r\n                        {\r\n                            $('#buy-modal').modal('hide');\r\n                            pnotifyService.success('Trade Complete', 'Hashtag has been bought');\r\n\r\n                            if(angular.isFunction(buyTagService.callback))\r\n                            {\r\n                                buyTagService.callback();\r\n                            }\r\n                            \r\n                            buy.control.isSubmitted = true;\r\n                        }else {\r\n                            pnotifyService.error('Trade Error', data.message);\r\n                        }\r\n                        \r\n                        buy.control.isLoading = false;\r\n                    });\r\n            }else\r\n            {\r\n                buy.control.isLoading = false;\r\n            }\r\n        },\r\n        isValid: function()\r\n        {\r\n            var buy = this;\r\n\r\n            var isValid = true;\r\n           \r\n            buy.validation.shares_taken = validationService.isInteger(buy.hashtag.shares_taken);\r\n            buy.validation.portfolio = validationService.dropdownOption(buy.hashtag.portfolio);\r\n            \r\n            angular.forEach(buy.validation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n\r\n            return isValid;\r\n        }\r\n\r\n        \r\n\t};\r\n\r\n    portfoliosService.then(function(service)\r\n    {\r\n        $scope.buy.userPortfolios = service.data;\r\n    });\r\n\r\n    $scope.$watch(function () {\r\n           return selectedPortfolioService.portfolioId;\r\n         },                       \r\n          function(newVal, oldVal) {\r\n            if(newVal > 0)\r\n            {\r\n               $scope.buy.hashtag.portfolio = newVal;\r\n            }\r\n            \r\n        }, true);\r\n\r\n    $scope.$watch(function () {\r\n           return buyTagService.id;\r\n         },                       \r\n          function(newVal, oldVal) {\r\n            $scope.buy.hashtag.hashtag_id = newVal;\r\n            $scope.buy.hashtag.shares_taken = 0;\r\n        }, true);\r\n\r\n    $scope.$watch(function () {\r\n           return buyTagService.tag;\r\n         },                       \r\n          function(newVal, oldVal) {\r\n            $scope.buy.hashtag.tag = newVal;\r\n        }, true);\r\n\r\n    $scope.$watch(function () {\r\n           return buyTagService.price;\r\n         },                       \r\n          function(newVal, oldVal) {\r\n            $scope.buy.hashtag.price = newVal;\r\n        }, true);\r\n\r\n\r\n    $scope.$watch(function () {\r\n           return $scope.buy.hashtag.shares_taken;\r\n         },                       \r\n          function(newVal, oldVal) {\r\n            $scope.buy.total = newVal * $scope.buy.hashtag.price;\r\n        }, true);\r\n});\r\n\r\n})();\r\n","\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('sideNavController', function($scope, portfoliosService, selectedPortfolioService) {\r\n    $scope.sideNav =\r\n    {\r\n        userPortfolios: null,\r\n        portfolio: null,\r\n        change: function () {\r\n            var sideNav = this;\r\n            selectedPortfolioService.setPortfolioId(sideNav.portfolio.id);\r\n        }\r\n\t};\r\n\r\n    portfoliosService.then(function(service)\r\n    {\r\n        $scope.sideNav.userPortfolios = service.data;\r\n        $scope.sideNav.portfolio = selectedPortfolioService.getPortfolio();\r\n    });\r\n\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('leaguesController', function($scope, $http, selectedPortfolioService) {\r\n    $scope.leagues = \r\n    {\r\n        join: {\r\n            code: '',\r\n            message: '',\r\n            showMessage: false\r\n        },\r\n        globalLeagues: [],\r\n        privateLeagues: [],\r\n        init: function ()\r\n        {\r\n            var leagues = this;\r\n\r\n            $http.get('/api/leagues/user/positions')\r\n                .success(function(data){\r\n                    leagues.globalLeagues = data.global;\r\n                    leagues.privateLeagues = data.private;\r\n                    \r\n                });\r\n            \r\n        },\r\n        joinSubmit: function()\r\n        {\r\n           var leagues = this;\r\n           \r\n           leagues.join.showMessage = false;\r\n           if(leagues.join.code === '')\r\n           {\r\n                leagues.join.message = 'Please enter a code';\r\n                leagues.join.showMessage = true;\r\n           }else\r\n           {\r\n            $http.post('/api/leagues/join/' + leagues.join.code)\r\n                .success(function(data){\r\n                    if(data.success)\r\n                    {\r\n                        window.location = '/league/' + data.id;\r\n                    }else {\r\n                        leagues.join.message = data.message;\r\n                        leagues.join.showMessage = true;\r\n                    }\r\n                    \r\n                });\r\n           }\r\n        }\r\n\t};\r\n\r\n});\r\n\r\n})();","\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('leagueCreateController', function($scope, $http, validationService) {\r\n    $scope.leagueCreate =\r\n    {\r\n    \tcontrol: {\r\n            isLoading: true,\r\n            isSubmitted: false\r\n        },\r\n        league: {\r\n            name: ''\r\n        },\r\n        validation: {\r\n            name: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n        },\r\n        init: function()\r\n        {\r\n            var leagueCreate = this;\r\n        },\r\n        submit: function()\r\n        {\r\n            var leagueCreate = this;\r\n\r\n            if (leagueCreate.isValid())\r\n            {\r\n               $http.post('/api/leagues/create', leagueCreate.league)\r\n                .success(function(data) \r\n                {\r\n                    if (data.success === true)\r\n                    {\r\n                        window.location = '/league/' + data.id + '?r=true';\r\n                    }\r\n                }); \r\n            }            \r\n        },\r\n        isValid: function()\r\n        {\r\n            var leagueCreate = this;\r\n\r\n            var isValid = true;\r\n       \r\n            leagueCreate.validation.name = validationService.shortDescription(leagueCreate.league.name);\r\n\r\n            angular.forEach(leagueCreate.validation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n            return isValid;\r\n        }\r\n\r\n        \r\n\t};\r\n\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('listController', function($scope, $http) {\r\n    $scope.list = \r\n    {\r\n    \tcontrol: {\r\n            isLoading: true,\r\n        },\r\n        paging: {\r\n            pageLength: 10,\r\n            currentPage: 1,\r\n            total: 50\r\n        },\r\n        hashtags:[],\r\n        init: function ()\r\n        {\r\n            var list = this;\r\n            $http.get('/api/hashtags/info')\r\n                .success(function(data){\r\n                    list.paging.total = data.total;\r\n                });\r\n               \r\n            list.listHashtags('hashtag', list.paging.currentPage);\r\n        },\r\n        listHashtags: function(objectName, newPage)\r\n        {\r\n            var list = this;\r\n            list.control.isLoading = true;\r\n            list.paging.currentPage = newPage;\r\n\r\n            $http.get('/api/hashtags/list?page=' + list.paging.currentPage + '&length=' + list.paging.pageLength)\r\n                .success(function(data){\r\n                    list.hashtags = data;\r\n                    list.control.isLoading = false;\r\n                });\r\n        }        \r\n\t}\r\n});\r\n\r\n})();","\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('betaWaitController', function($scope, $http, validationService) {\r\n    $scope.betaWait = \r\n    {\r\n        inputs: {\r\n            email: '',\r\n        },\r\n        validation: {\r\n            email: {\r\n                isValid: true,\r\n                message: ''\r\n            },\r\n        },\r\n        message: '',\r\n    \tcontrol: {\r\n    \t\tisLoading: false\r\n    \t},\r\n        submit: function () {\r\n            var beta = this;\r\n            if (beta.isValid())\r\n            {\r\n               $http.post('/api/beta/create', beta.inputs)\r\n                .success(function(data) \r\n                {\r\n                   beta.message = \"Thanks, we'll contact you when we start the open beta.\";\r\n                }); \r\n            }\r\n            \r\n        },\r\n        isValid: function() {\r\n            var beta = this;\r\n            var isValid = true;\r\n            \r\n            beta.validation.email = validationService.email(beta.inputs.email);\r\n            \r\n\r\n            angular.forEach(beta.validation, function(validation)\r\n            {\r\n                if (validation.isValid === false)\r\n                {\r\n                    isValid = false;\r\n                }\r\n            });\r\n            return isValid;\r\n        }\r\n    \t\r\n\t}\r\n});\r\n\r\n})();","\r\n(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n\r\n.controller('contactController', function($scope, $http, pnotifyService) {\r\n    $scope.contact =\r\n    {\r\n    \tcontrol: {\r\n            isLoading: false,\r\n            isSubmitted: false\r\n        },\r\n        userPortfolios: null,\r\n        inputs: {\r\n            subject: '',\r\n            message: ''\r\n        },\r\n        submit: function()\r\n        {\r\n            var contact = this;\r\n            contact.control.isLoading = true;\r\n\r\n            $http.post('/api/contact/create', contact.inputs)\r\n                .success(function(data){\r\n                    if (data.success == true)\r\n                    {\r\n                        $('#contact-modal').modal('hide');\r\n                        pnotifyService.success('Trade Complete', 'Hashtag has been bought');\r\n\r\n                        contact.control.isSubmitted = true;\r\n                    }else {\r\n                        pnotifyService.error('Trade Error', data.message);\r\n                    }\r\n\r\n                    contact.control.isLoading = false;\r\n                });\r\n\r\n        }\r\n\r\n\r\n\t};\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .directive('googleplace', function() {\r\n        return {\r\n            require: 'ngModel',\r\n            link: function(scope, element, attrs, model) {\r\n                var options = {componentRestrictions: {country: 'gb'}, types: ['(cities)']};\r\n               \r\n                scope.gPlace = new google.maps.places.Autocomplete(element[0], options);\r\n                \r\n                google.maps.event.addListener(scope.gPlace, 'place_changed', function() {\r\n                    scope.$apply(function() {\r\n                       scope.geoId = scope.gPlace.getPlace().place_id;\r\n                       \r\n                        model.$setViewValue(element.val());                \r\n                    });\r\n                });\r\n\r\n            },\r\n        };\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .directive('cdnImage', function() {\r\n        return {\r\n            restrict:'E',\r\n            template: '<img ng-src=\"{{imageSrc}}\" class=\"{{cdnClass}}\" />',\r\n            scope: {\r\n                cdnSrc: '@',\r\n                cdnFile: '@',\r\n                cdnClass: '@'\r\n            },\r\n            link: function(scope, element, attrs, model) {\r\n               scope.imageSrc = '';\r\n\r\n               attrs.$observe('cdnFile', function () {\r\n                    if (scope.cdnSrc.length > 0 && scope.cdnFile.length > 0)\r\n                    {\r\n                        scope.imageSrc = '/cdn/' + scope.cdnSrc + '/' + scope.cdnFile;\r\n                    }else\r\n                    {\r\n                        scope.imageSrc = '/cdn/placeholder.jpg';\r\n                    }\r\n                \r\n                }); \r\n            },\r\n        };\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .directive('cdnBuyButton', function($http, pnotifyService, buyTagService) {\r\n        return {\r\n            restrict:'E',\r\n            template: '<a ng-disabled=\"isLoading\" href=\"#buy-modal\" data-toggle=\"modal\" class=\"btn btn-success btn-{{buttonSize}}\" ng-click=\"buy();\"> Buy </a>',\r\n            scope: {\r\n                eventHandler: '&',\r\n                buttonSize: '@',\r\n                hashtagId: '@',\r\n                price: '@',\r\n                tag: '@'\r\n            },\r\n            link: function(scope, element, attrs, model) {\r\n               scope.buy = function()\r\n                {\r\n                    buyTagService.setData(scope.hashtagId, scope.tag, scope.price);\r\n                    buyTagService.setCallback(scope.eventHandler);\r\n                }\r\n            },\r\n            \r\n            \r\n        };\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .directive('cdnSellButton', function($http, pnotifyService) {\r\n        return {\r\n            restrict:'E',\r\n            template: '<a ng-disabled=\"isLoading\" href=\"#\" class=\"btn btn-danger btn-{{buttonSize}}\" ng-click=\"sell();\"> Sell </a>',\r\n            scope: {\r\n                eventHandler: '&',\r\n                buttonSize: '@',\r\n                tradeId: '@'\r\n            },\r\n            link: function(scope, element, attrs, model) {\r\n               scope.sell = function()\r\n                {\r\n                    scope.isLoading = true;\r\n                    \r\n                    var postData = {\r\n                        id: scope.tradeId\r\n                    };\r\n                    \r\n                    $http.post('/api/trades/complete', postData)\r\n                        .success(function(data){\r\n                            console.log(data);\r\n                            if (data.success == true)\r\n                            {\r\n                                pnotifyService.success('Trade Complete', 'Hashtag has been sold');\r\n                                scope.eventHandler();\r\n                            }else {\r\n                                pnotifyService.error('Trade Failed', 'Something went wrong');\r\n                            }\r\n                            \r\n                            scope.isLoading = false;\r\n                        });\r\n                }\r\n            },\r\n            \r\n            \r\n        };\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .directive('priceGraph', function($http, pnotifyService) {\r\n        return {\r\n            restrict:'E',\r\n            template: '<div id=\"graph_line\" style=\"width:100%; height:300px;\"></div>',\r\n            scope: {\r\n                hashtagId: '@'\r\n            },\r\n            link: function(scope, element, attrs, model) {\r\n               attrs.$observe('hashtagId', function () {\r\n                 if (scope.hashtagId > 0)\r\n                 {\r\n                   $http.get('/api/hashtags/counts?id=' + scope.hashtagId)\r\n                       .success(function(data){\r\n                       new Morris.Area({\r\n                           element: 'graph_line',\r\n                           xkey: 'created_at',\r\n                           ykeys: ['amount'],\r\n                           labels: ['Price'],\r\n                           hideHover: 'auto',\r\n                           xLabels: \"day\",\r\n                           lineColors: ['#26B99A'],\r\n                           data: data\r\n                       });\r\n                   });\r\n                 }  \r\n                });\r\n            },\r\n\r\n\r\n        };\r\n    });\r\n\r\n})();\r\n","/**\r\n * @ngDoc directive\r\n * @name ng.directive:paging\r\n *\r\n * @description\r\n * A directive to aid in paging large datasets\r\n * while requiring a small amount of page\r\n * information.\r\n *\r\n * @element EA\r\n *\r\n */\r\nangular.module('bw.paging', []).directive('paging', function () {\r\n\r\n    /**\r\n    * The angular return value required for the directive\r\n    * Feel free to tweak / fork values for your application\r\n    */ \r\n    return {\r\n\r\n        // Restrict to elements and attributes\r\n        restrict: 'EA',\r\n        \r\n        // Assign the angular link function\r\n        link: fieldLink,\r\n        \r\n        // Assign the angular scope attribute formatting\r\n        scope: {\r\n            page: '=',\r\n            pageSize: '=',\r\n            total: '=',\r\n            dots: '@',\r\n            hideIfEmpty: '@',\r\n            ulClass: '@',\r\n            activeClass: '@',\r\n            disabledClass: '@',\r\n            adjacent: '@',\r\n            scrollTop: '@',\r\n            showPrevNext: '@',\r\n            pagingAction: '&'\r\n        },\r\n\r\n        // Assign the angular directive template HTML\r\n        template: \r\n            '<ul ng-hide=\"Hide\" ng-class=\"ulClass\"> ' +\r\n                '<li ' +\r\n                    'title=\"{{Item.title}}\" ' +\r\n                    'ng-class=\"Item.liClass\" ' +\r\n                    'ng-click=\"Item.action()\" ' +\r\n                    'ng-repeat=\"Item in List\"> ' +\r\n                        '<span ng-bind=\"Item.value\"></span> ' +\r\n                '</li>' +\r\n            '</ul>'\r\n    };\r\n    \r\n    \r\n    /**\r\n    * Link the directive to enable our scope watch values\r\n    * \r\n    * @param {object} scope - Angular link scope\r\n    * @param {object} el - Angular link element\r\n    * @param {object} attrs - Angular link attribute \r\n    */\r\n    function fieldLink (scope, el, attrs) {\r\n            \r\n        // Hook in our watched items \r\n        scope.$watchCollection('[page,pageSize,total]', function () {\r\n            build(scope, attrs);\r\n        });\r\n    }\r\n    \r\n    \r\n    /**\r\n    * Assign default scope values from settings\r\n    * Feel free to tweak / fork these for your application\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {Object} attrs - The local directive attribute object\r\n    */ \r\n    function setScopeValues(scope, attrs) {\r\n\r\n        scope.List = [];\r\n        scope.Hide = false;\r\n        scope.dots = scope.dots || '...';\r\n        scope.page = parseInt(scope.page) || 1;\r\n        scope.total = parseInt(scope.total) || 0;\r\n        scope.ulClass = scope.ulClass || 'pagination';\r\n        scope.adjacent = parseInt(scope.adjacent) || 2;\r\n        scope.activeClass = scope.activeClass || 'active';\r\n        scope.disabledClass = scope.disabledClass || 'disabled';\r\n\r\n        scope.scrollTop = scope.$eval(attrs.scrollTop);\r\n        scope.hideIfEmpty = scope.$eval(attrs.hideIfEmpty);\r\n        scope.showPrevNext = scope.$eval(attrs.showPrevNext);\r\n    }\r\n\r\n\r\n    /**\r\n    * Validate and clean up any scope values\r\n    * This happens after we have set the scope values\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {int} pageCount - The last page number or total page count \r\n    */\r\n    function validateScopeValues(scope, pageCount) {\r\n\r\n        // Block where the page is larger than the pageCount\r\n        if (scope.page > pageCount) {\r\n            scope.page = pageCount;\r\n        }\r\n\r\n        // Block where the page is less than 0\r\n        if (scope.page <= 0) {\r\n            scope.page = 1;\r\n        }\r\n\r\n        // Block where adjacent value is 0 or below\r\n        if (scope.adjacent <= 0) {\r\n            scope.adjacent = 2;\r\n        }\r\n\r\n        // Hide from page if we have 1 or less pages\r\n        // if directed to hide empty\r\n        if (pageCount <= 1) {\r\n            scope.Hide = scope.hideIfEmpty;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Assign the method action to take when a page is clicked\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {int} page - The current page of interest\r\n    */\r\n    function internalAction(scope, page) {\r\n\r\n        // Block clicks we try to load the active page\r\n        if (scope.page == page) { return; }\r\n\r\n        // Update the page in scope \r\n        scope.page = page;\r\n\r\n        // Pass our parameters to the paging action\r\n        scope.pagingAction({\r\n            page: scope.page,\r\n            pageSize: scope.pageSize,\r\n            total: scope.total\r\n        });\r\n\r\n        // If allowed scroll up to the top of the page\r\n        if (scope.scrollTop) {\r\n            scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Add the first, previous, next, and last buttons if desired   \r\n    * The logic is defined by the mode of interest\r\n    * This method will simply return if the scope.showPrevNext is false\r\n    * This method will simply return if there are no pages to display\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {int} pageCount - The last page number or total page count\r\n    * @param {string} mode - The mode of interest either prev or last \r\n    */\r\n    function addPrevNext(scope, pageCount, mode){\r\n        \r\n        // Ignore if we are not showing\r\n        // or there are no pages to display\r\n        if (!scope.showPrevNext || pageCount < 1) { return; }\r\n\r\n        // Local variables to help determine logic\r\n        var disabled, alpha, beta;\r\n\r\n\r\n        // Determine logic based on the mode of interest\r\n        // Calculate the previous / next page and if the click actions are allowed\r\n        if(mode === 'prev') {\r\n            \r\n            disabled = scope.page - 1 <= 0;\r\n            var prevPage = scope.page - 1 <= 0 ? 1 : scope.page - 1;\r\n            \r\n            alpha = { value : \"<<\", title: 'First Page', page: 1 };\r\n            beta = { value: \"<\", title: 'Previous Page', page: prevPage };\r\n             \r\n        } else {\r\n            \r\n            disabled = scope.page + 1 > pageCount;\r\n            var nextPage = scope.page + 1 >= pageCount ? pageCount : scope.page + 1;\r\n            \r\n            alpha = { value : \">\", title: 'Next Page', page: nextPage };\r\n            beta = { value: \">>\", title: 'Last Page', page: pageCount };\r\n        }\r\n\r\n        // Create the Add Item Function\r\n        var addItem = function(item, disabled){           \r\n            scope.List.push({\r\n                value: item.value,\r\n                title: item.title,\r\n                liClass: disabled ? scope.disabledClass : '',\r\n                action: function(){\r\n                    if(!disabled) {\r\n                        internalAction(scope, item.page);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        // Add our items\r\n        addItem(alpha, disabled);\r\n        addItem(beta, disabled);\r\n    }\r\n\r\n\r\n    /**\r\n    * Adds a range of numbers to our list \r\n    * The range is dependent on the start and finish parameters\r\n    *\r\n    * @param {int} start - The start of the range to add to the paging list\r\n    * @param {int} finish - The end of the range to add to the paging list \r\n    * @param {Object} scope - The local directive scope object\r\n    */\r\n    function addRange(start, finish, scope) {\r\n\r\n        var i = 0;\r\n        for (i = start; i <= finish; i++) {\r\n\r\n            var item = {\r\n                value: i,\r\n                title: 'Page ' + i,\r\n                liClass: scope.page == i ? scope.activeClass : '',\r\n                action: function () {\r\n                    internalAction(scope, this.value);\r\n                }\r\n            };\r\n\r\n            scope.List.push(item);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Add Dots ie: 1 2 [...] 10 11 12 [...] 56 57\r\n    * This is my favorite function not going to lie\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    */\r\n    function addDots(scope) {\r\n        scope.List.push({\r\n            value: scope.dots\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n    * Add the first or beginning items in our paging list  \r\n    * We leverage the 'next' parameter to determine if the dots are required\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {int} next - the next page number in the paging sequence\r\n    */\r\n    function addFirst(scope, next) {\r\n        \r\n        addRange(1, 2, scope);\r\n\r\n        // We ignore dots if the next value is 3\r\n        // ie: 1 2 [...] 3 4 5 becomes just 1 2 3 4 5 \r\n        if(next != 3){\r\n            addDots(scope);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Add the last or end items in our paging list  \r\n    * We leverage the 'prev' parameter to determine if the dots are required\r\n    *\r\n    * @param {int} pageCount - The last page number or total page count \r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {int} prev - the previous page number in the paging sequence\r\n    */\r\n    // Add Last Pages\r\n    function addLast(pageCount, scope, prev) {\r\n\r\n        // We ignore dots if the previous value is one less that our start range\r\n        // ie: 1 2 3 4 [...] 5 6  becomes just 1 2 3 4 5 6 \r\n        if(prev != pageCount - 2){\r\n            addDots(scope);\r\n        }\r\n\r\n        addRange(pageCount - 1, pageCount, scope);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * The main build function used to determine the paging logic\r\n    * Feel free to tweak / fork values for your application\r\n    *\r\n    * @param {Object} scope - The local directive scope object\r\n    * @param {Object} attrs - The local directive attribute object\r\n    */ \r\n    function build(scope, attrs) {\r\n\r\n        // Block divide by 0 and empty page size\r\n        if (!scope.pageSize || scope.pageSize <= 0) { scope.pageSize = 1; }\r\n\r\n        // Determine the last page or total page count\r\n        var pageCount = Math.ceil(scope.total / scope.pageSize);\r\n\r\n        // Set the default scope values where needed\r\n        setScopeValues(scope, attrs);\r\n\r\n        // Validate the scope values to protect against strange states\r\n        validateScopeValues(scope, pageCount);\r\n\r\n        // Create the beginning and end page values \r\n        var start, finish;\r\n\r\n        // Calculate the full adjacency value \r\n        var fullAdjacentSize = (scope.adjacent * 2) + 2;\r\n\r\n\r\n        // Add the Next and Previous buttons to our list\r\n        addPrevNext(scope, pageCount, 'prev');\r\n\r\n        // If the page count is less than the full adjacnet size\r\n        // Then we simply display all the pages, Otherwise we calculate the proper paging display\r\n        if (pageCount <= (fullAdjacentSize + 2)) {\r\n\r\n            start = 1;\r\n            addRange(start, pageCount, scope);\r\n\r\n        } else {\r\n\r\n            // Determine if we are showing the beginning of the paging list \r\n            // We know it is the beginning if the page - adjacent is <= 2\r\n            if (scope.page - scope.adjacent <= 2) {\r\n\r\n                start = 1;\r\n                finish = 1 + fullAdjacentSize;\r\n\r\n                addRange(start, finish, scope);\r\n                addLast(pageCount, scope, finish);\r\n            } \r\n\r\n            // Determine if we are showing the middle of the paging list\r\n            // We know we are either in the middle or at the end since the beginning is ruled out above\r\n            // So we simply check if we are not at the end \r\n            // Again 2 is hard coded as we always display two pages after the dots\r\n            else if (scope.page < pageCount - (scope.adjacent + 2)) {\r\n\r\n                start = scope.page - scope.adjacent;\r\n                finish = scope.page + scope.adjacent;\r\n\r\n                addFirst(scope, start);\r\n                addRange(start, finish, scope);\r\n                addLast(pageCount, scope, finish);\r\n            } \r\n\r\n            // If nothing else we conclude we are at the end of the paging list\r\n            // We know this since we have already ruled out the beginning and middle above\r\n            else {\r\n\r\n                start = pageCount - fullAdjacentSize;\r\n                finish = pageCount;\r\n\r\n                addFirst(scope, start);\r\n                addRange(start, finish, scope);\r\n            }\r\n        }\r\n\r\n        // Add the next and last buttons to our paging list\r\n        addPrevNext(scope, pageCount, 'next');\r\n    }\r\n\r\n\r\n});\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .filter('titlecase', function() {\r\n    return function(s) {\r\n        s = ( s === undefined || s === null ) ? '' : s;\r\n        return s.toString().toLowerCase().replace( /\\b([a-z])/g, function(ch) {\r\n            return ch.toUpperCase();\r\n        });\r\n    };\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .filter('currency', function() {\r\n    return function(s) {\r\n        return s;\r\n    };\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .filter('percentageDifference', function() {\r\n    return function(s, oldValue, newValue) {\r\n    \tvar symbol = '';\r\n    \tif (oldValue <= newValue)\r\n    \t{\r\n    \t\tsymbol = '+';\r\n    \t}\r\n\r\n    \tvar val = (((newValue - oldValue)/oldValue) * 100).toFixed(2)\r\n        return symbol + val + '%';\r\n    };\r\n});\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .service('pnotifyService', function() {\r\n        this.success = function(title, message)\r\n        {\r\n\r\n            var notice = new PNotify({\r\n                    title: title,\r\n                    text: message,\r\n                    type: 'success',\r\n                    mouse_reset: false,\r\n                    delay:2000,\r\n                    buttons: {\r\n                        closer: true,\r\n                        sticker: false\r\n                    }\r\n                });\r\n            \r\n        }\r\n\r\n        this.error = function(title, message)\r\n        {\r\n            new PNotify({\r\n                    title: title,\r\n                    text: message,\r\n                    type: 'error',\r\n                    mouse_reset: false,\r\n                    delay:2000,\r\n                    buttons: {\r\n                        closer: true,\r\n                        sticker: false\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .service('validationService', function() {\r\n\r\n        this.EMAIL_REGEXP = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/;\r\n        this.PASSWORD_REGEXP = /^[a-zA-Z0-9]{7,}$/;\r\n        this.SHORTDESCRIPTION = /^[ a-zA-Z0-9]{3,}$/;\r\n\r\n        this.shortDescription = function(description)\r\n        {\r\n            var isValid = description.match(this.SHORTDESCRIPTION) != null;\r\n            return { isValid: isValid, message: isValid ? '' : 'Please enter a value'};           \r\n        }\r\n\r\n        this.email = function(email)\r\n        {\r\n            var isValid = email.match(this.EMAIL_REGEXP) != null;\r\n            return { isValid: isValid, message: isValid ? '' : 'Please enter an email'};        \r\n        }\r\n\r\n        this.password = function(password)\r\n        {\r\n            var isValid = password.match(this.PASSWORD_REGEXP) != null;\r\n            return { isValid: isValid, message: isValid ? '' : 'Not a valid password'};           \r\n        }\r\n\r\n        this.isInteger = function(val)\r\n        {\r\n            var isValid = (val > 0);\r\n            return { isValid: isValid, message: isValid ? '' : 'Number above 0 needed'};\r\n        }\r\n\r\n        this.dropdownOption = function(val)\r\n        {\r\n            var isValid = (val > 0);\r\n            return { isValid: isValid, message: isValid ? '' : 'Please select value'};\r\n        }\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .factory('buyTagService', function() {\r\n    \tvar hashtag = {};\r\n        hashtag.tag = '';\r\n        hashtag.id = 0;\r\n        hashtag.price = '';\r\n\r\n        hashtag.callback = null;\r\n\r\n        hashtag.setData = function(id, tag, price)\r\n        {\r\n        \thashtag.id = id;\r\n        \thashtag.tag = tag;\r\n        \thashtag.price = price;\r\n        }\r\n\r\n        hashtag.setCallback = function(callback)\r\n        {\r\n            hashtag.callback = callback;\r\n        }\r\n\r\n        return hashtag; \r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .factory('portfoliosService', function($http) {\r\n    \tvar promise = $http.get('/api/user/portfolios')\r\n                .success(function(data){\r\n                    var userPortfolios = {\r\n                        portfolios: data\r\n                    };\r\n                   \r\n                    return userPortfolios;\r\n                });\r\n\r\n\r\n        return promise;\r\n    });\r\n\r\n})();\r\n","(function () {\r\n\r\n'use strict';\r\n\r\nangular.module('appMain')\r\n    .service('selectedPortfolioService', ['$cookies', 'portfoliosService', function($cookies, portfoliosService) {\r\n        var selectedPortfolio = {};\r\n\r\n        selectedPortfolio.portfolioId = -1;\r\n        selectedPortfolio.portfolio = null;\r\n\r\n        portfoliosService.then(function(service)\r\n        {\r\n            selectedPortfolio.portfolios = service.data;\r\n\r\n            if($cookies.tagdaqportfolio > 0)\r\n            {\r\n                var useId = false;\r\n                var id = $cookies.tagdaqportfolio;\r\n\r\n                for (var i = 0; i < selectedPortfolio.portfolios.length; i++) {\r\n                    if (selectedPortfolio.portfolios[i].id == id)\r\n                    {\r\n                        selectedPortfolio.portfolio = selectedPortfolio.portfolios[i];\r\n                        useId = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (useId === false)\r\n                {\r\n                    selectedPortfolio.portfolio = selectedPortfolio.portfolios[0];\r\n                    if (selectedPortfolio.portfolio)\r\n                    {\r\n                        id = selectedPortfolio.portfolio.id;\r\n                    }else {\r\n                        id = 0;\r\n                    }\r\n\r\n                }\r\n            }else\r\n            {\r\n                selectedPortfolio.portfolio = selectedPortfolio.portfolios[0];\r\n                id = selectedPortfolio.portfolio.id;\r\n            }\r\n\r\n            if(id > 0)\r\n            {\r\n               selectedPortfolio.setPortfolioId(id);\r\n            }\r\n        });\r\n\r\n        selectedPortfolio.setPortfolioId = function(id)\r\n        {\r\n            selectedPortfolio.portfolioId = id;\r\n\r\n            $cookies.tagdaqportfolio = id;\r\n        }\r\n\r\n        selectedPortfolio.getPortfolio = function()\r\n        {\r\n            return selectedPortfolio.portfolio;\r\n        }\r\n\r\n        selectedPortfolio.getPortfolioId = function()\r\n        {\r\n            return selectedPortfolio.portfolioId;\r\n        }\r\n\r\n        return selectedPortfolio;\r\n    }]);\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}